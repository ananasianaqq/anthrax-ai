#version 450 
layout(local_size_x = 256) in;

#include "defines/defines.h"

vec4 quat_from_mat3(mat3 m) 
{
    float trace = m[0][0] + m[1][1] + m[2][2];
    vec4 q;
    if (trace > 0.0) {
        float s = sqrt(trace + 1.0) * 2.0;
        q.w = 0.25 * s;
        q.x = (m[2][1] - m[1][2]) / s;
        q.y = (m[0][2] - m[2][0]) / s;
        q.z = (m[1][0] - m[0][1]) / s;
    } 
    else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {
        float s = sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]) * 2.0;
        q.w = (m[2][1] - m[1][2]) / s;
        q.x = 0.25 * s;
        q.y = (m[0][1] + m[1][0]) / s;
        q.z = (m[0][2] + m[2][0]) / s;
    } 
    else if (m[1][1] > m[2][2]) {
        float s = sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]) * 2.0;
        q.w = (m[0][2] - m[2][0]) / s;
        q.x = (m[0][1] + m[1][0]) / s;
        q.y = 0.25 * s;
        q.z = (m[1][2] + m[2][1]) / s;
    } 
    else {
        float s = sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]) * 2.0;
        q.w = (m[1][0] - m[0][1]) / s;
        q.x = (m[0][2] + m[2][0]) / s;
        q.y = (m[1][2] + m[2][1]) / s;
        q.z = 0.25 * s;
    }
    return normalize(q);
}

vec4 quat_slerp(vec4 q1, vec4 q2, float t) 
{
    float cos_theta = dot(q1, q2);
    if (cos_theta < 0.0) {
        q2 = -q2;
        cos_theta = -cos_theta;
    }
    if (cos_theta > 0.9995) {
        return normalize(mix(q1, q2, t));
    } 
    else {
        float theta = acos(cos_theta);
        float sin_theta = sqrt(1.0 - cos_theta * cos_theta);
        float a = sin((1.0 - t) * theta) / sin_theta;
        float b = sin(t * theta) / sin_theta;
        return a * q1 + b * q2;
    }
}

mat3 mat3_from_quat(vec4 q) 
{
    float x = q.x, y = q.y, z = q.z, w = q.w;
    float xx = x*x, yy = y*y, zz = z*z;
    float xy = x*y, xz = x*z, yz = y*z;
    float wx = w*x, wy = w*y, wz = w*z;
    return mat3(
        1.0 - 2.0*(yy+zz), 2.0*(xy-wz),     2.0*(xz+wy),
        2.0*(xy+wz),       1.0-2.0*(xx+zz), 2.0*(yz-wx),
        2.0*(xz-wy),       2.0*(yz+wx),     1.0-2.0*(xx+yy)
    );
}

mat4 slerp_mat4(mat4 A, mat4 B, float t) {
    vec4 qA = quat_from_mat3(mat3(A));
    vec4 qB = quat_from_mat3(mat3(B));
    vec4 q = quat_slerp(qA, qB, t);
    mat3 R = mat3_from_quat(q);

    vec3 TA = A[3].xyz;
    vec3 TB = B[3].xyz;
    vec3 T = mix(TA, TB, t);

    mat4 M = mat4(R);
    M[3] = vec4(T, 1.0);
    return M;
}
#ifdef MEMCPY_TEST
void Hierarchy(int animind, int boneind, int aindex, int settransform,  mat4 aoffset,  mat4 transform, mat4 global_inverse, mat4 parenttransform)
{
    mat4 nodetransf = transform;
    mat4 globaltransf;

    int isempty = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.animisempty[animind];
    if (isempty == 0) {
        // mat4 pos = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].animpos[animind];
        // mat4 rot = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].animrot[animind];
        
        int rot_comp =   GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.rot_comp[animind];
        mat4 rot;
        if (rot_comp == 0) {
            rot = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.rot_out[animind];
        }
        else {
            mat4 start = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.rot_start[animind];
            mat4 end = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.rot_end[animind];
            float factor = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.rot_factor[animind];

            rot = slerp_mat4(start, end, factor);
        }

        int pos_comp =   GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.pos_comp[animind];
        mat4 pos;
        if (pos_comp == 0) {
            vec4 pout = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.pos_out[animind];
            pos =   mat4( 1.0, 0, 0, 0,
                        0, 1.0, 0, 0,
                        0, 0, 1.0, 0,
                        pout.x, pout.y, pout.z, pout.w);
        }
        else {
            vec4 start = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.pos_start[animind];
            vec4 end = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.pos_end[animind];
            float factor = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.pos_factor[animind];

            vec4 pout = mix(start, end, factor);
            pos =   mat4( 1.0, 0, 0, 0,
                        0, 1.0, 0, 0,
                        0, 0, 1.0, 0,
                        pout.x, pout.y, pout.z, pout.w);
        }

        int scale_comp =   GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.scale_comp[animind];
        mat4 scale;
        if (scale_comp == 0) {
            vec4 pout = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.scale_out[animind];
            scale =   mat4( 1.0, 0, 0, 0,
                        0, 1.0, 0, 0,
                        0, 0, 1.0, 0,
                        pout.x, pout.y, pout.z, pout.w);
        }
        else {
            vec4 start = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.scale_start[animind];
            vec4 end = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.scale_end[animind];
            float factor = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.scale_factor[animind];

            vec4 pout = mix(start, end, factor);
            scale =   mat4( 1.0 * pout.x, 0, 0, 0,
                        0, 1.0 * pout.y, 0, 0,
                        0, 0, 1.0 * pout.z, 0,
                        1, 1, 1, 1);
        }

        // mat4 scale = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].animscale[animind];
        nodetransf = pos * rot *  scale;
    }

    globaltransf = ( aindex == 0 ? parenttransform : GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].anim_transforms[aindex - 1]) * nodetransf;
    GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].anim_transforms[aindex] = globaltransf;

    if (settransform == 1) {
        GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].bonesmatrices[boneind] = global_inverse * globaltransf * aoffset;
    }
}

void ProcessAnimation()
{
    mat4 globaltransf[200];
    mat4 global_inverse = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].global_transform;
    int rootsize = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].rootssize;
    for (int i = 0; i < rootsize; i++) {
        int animind = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.nodeAnimInd[i];
        int aindex = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.nodeIndex[i];
        int boneind = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.nodeBoneInd[i];
        int settransform = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].floats.nodesettransform[i];
        mat4 aoffset = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.nodeOffset[i];
        mat4 transform = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].matricies.nodeTransform[i];
        Hierarchy(animind, boneind, aindex, settransform, aoffset, transform, global_inverse, mat4(1));
    }

}
#else
void Hierarchy(int animind, int boneind, int aindex, int settransform,  mat4 aoffset,  mat4 transform, mat4 global_inverse, mat4 parenttransform)
{
    mat4 nodetransf = transform;
    mat4 globaltransf;

    int isempty = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].animisempty[animind];
    if (isempty == 0) {
        // mat4 pos = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].animpos[animind];
        // mat4 rot = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].animrot[animind];
        
        int rot_comp =   GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].rot_comp[animind];
        mat4 rot;
        if (rot_comp == 0) {
            rot = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].rot_out[animind];
        }
        else {
            mat4 start = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].rot_start[animind];
            mat4 end = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].rot_end[animind];
            float factor = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].rot_factor[animind];

            rot = slerp_mat4(start, end, factor);
        }

        int pos_comp =   GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].pos_comp[animind];
        mat4 pos;
        if (pos_comp == 0) {
            vec4 pout = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].pos_out[animind];
            pos =   mat4( 1.0, 0, 0, 0,
                        0, 1.0, 0, 0,
                        0, 0, 1.0, 0,
                        pout.x, pout.y, pout.z, pout.w);
        }
        else {
            vec4 start = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].pos_start[animind];
            vec4 end = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].pos_end[animind];
            float factor = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].pos_factor[animind];

            vec4 pout = mix(start, end, factor);
            pos =   mat4( 1.0, 0, 0, 0,
                        0, 1.0, 0, 0,
                        0, 0, 1.0, 0,
                        pout.x, pout.y, pout.z, pout.w);
        }

        int scale_comp =   GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].scale_comp[animind];
        mat4 scale;
        if (scale_comp == 0) {
            vec4 pout = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].scale_out[animind];
            scale =   mat4( 1.0, 0, 0, 0,
                        0, 1.0, 0, 0,
                        0, 0, 1.0, 0,
                        pout.x, pout.y, pout.z, pout.w);
        }
        else {
            vec4 start = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].scale_start[animind];
            vec4 end = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].scale_end[animind];
            float factor = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].scale_factor[animind];

            vec4 pout = mix(start, end, factor);
            scale =   mat4( 1.0 * pout.x, 0, 0, 0,
                        0, 1.0 * pout.y, 0, 0,
                        0, 0, 1.0 * pout.z, 0,
                        1, 1, 1, 1);
        }

        // mat4 scale = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].animscale[animind];
        nodetransf = pos * rot *  scale;
    }

    globaltransf = ( aindex == 0 ? parenttransform : GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].anim_transforms[aindex - 1]) * nodetransf;
    GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].anim_transforms[aindex] = globaltransf;

    if (settransform == 1) {
        GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].bonesmatrices[boneind] = global_inverse * globaltransf * aoffset;
    }
}

void ProcessAnimation()
{
    mat4 globaltransf[200];
    mat4 global_inverse = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].global_transform;
    int rootsize = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].rootssize;
    for (int i = 0; i < rootsize; i++) {
        int animind = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].nodeAnimInd[i];
        int aindex = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].nodeIndex[i];
        int boneind = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].nodeBoneInd[i];
        int settransform = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].nodesettransform[i];
        mat4 aoffset = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].nodeOffset[i];
        mat4 transform = GetResource(Animation, GetInstanceInd()).animations[gl_GlobalInvocationID.x].nodeTransform[i];
        Hierarchy(animind, boneind, aindex, settransform, aoffset, transform, global_inverse, mat4(1));
    }

}
#endif
void main()
{
    if (gl_GlobalInvocationID.x < MAX_INSTANCES) {
        //mat4 render_mat = GetResource(Compute, GetStorageInd()).rendermatrix[gl_GlobalInvocationID.x];
        //GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].hasanimation = 0;
        uint hasanim = GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].hasanimation;
        if (hasanim == 1) {
            ProcessAnimation();
        }

        vec4 gizmo_dist = GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].gizmo_dist;
        vec4 pos = GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].position ;
        mat4 mp = mat4( 1.0 * gizmo_dist.x, 0, 0, 0,
                        0, 1.0 * gizmo_dist.y, 0, 0,
                        0, 0, 1.0 * gizmo_dist.z, 0,
                        pos.x, pos.y, pos.z, pos.w);
        GetResource(Instance, GetStorageInd()).instances[gl_GlobalInvocationID.x].rendermatrix = mp;
    }
}
